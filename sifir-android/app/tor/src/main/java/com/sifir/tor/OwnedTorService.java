// Automatically generated by flapigen
package com.sifir.tor;


public final class OwnedTorService {

    public OwnedTorService(TorServiceParam param) throws Exception {
        long a0 = param.mNativeObj;
        param.mNativeObj = 0;

        mNativeObj = init(a0);
        JNIReachabilityFence.reachabilityFence1(param);
    }
    private static native long init(long param) throws Exception;

    public final int getSocksPort() {
        int ret = do_getSocksPort(mNativeObj);

        return ret;
    }
    private static native int do_getSocksPort(long self);

    public final void shutdown() throws Exception {
        do_shutdown(mNativeObj);
    }
    private static native void do_shutdown(long self) throws Exception;

    public final String get_status() {
        String ret = do_get_status(mNativeObj);

        return ret;
    }
    private static native String do_get_status(long self);

    public final TorHiddenService create_hidden_service(int dst_port, int hs_port, String secret_key) throws Exception {
        long ret = do_create_hidden_service(mNativeObj, dst_port, hs_port, secret_key);
        TorHiddenService convRet = new TorHiddenService(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_create_hidden_service(long self, int dst_port, int hs_port, String secret_key) throws Exception;

    public final void delete_hidden_service(String onion) throws Exception {
        do_delete_hidden_service(mNativeObj, onion);
    }
    private static native void do_delete_hidden_service(long self, String onion) throws Exception;

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ OwnedTorService(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;
}